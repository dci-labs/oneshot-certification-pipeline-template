---
- name: test-container-parallel-recertify
  stage: container
  topic: OCP-4.14
  ansible_playbook: /usr/share/dci-openshift-app-agent/dci-openshift-app-agent.yml
  ansible_cfg: ~/oneshot-certification-pipeline-template/pipelines/ansible.cfg
  ansible_inventory: ~/oneshot-certification-pipeline-template/inventories/@QUEUE/@RESOURCE-workload.yml
  dci_credentials: ~/.config/dci-pipeline/dci_credentials.yml
  ansible_skip_tags:
    - post-run
  ansible_extravars:
    dci_cache_dir: ~/dci-cache-dir
    dci_config_dir: ~/oneshot-certification-pipeline-template/ocp-workload
    dci_gits_to_components:
      - ~/oneshot-certification-pipeline-template
    dci_local_log_dir: ~/upload-errors
    dci_tags: ["preflight","container","async", "parallel", "recertify"]
    dci_workarounds: []

    # custom setting
    organization_id: 15451045
    page_size: 200

    # docker auth and backend access
    partner_creds: "/var/lib/dci-openshift-app-agent/demo-auth.json"
    pyxis_apikey_path: "/var/lib/dci-openshift-app-agent/demo-pyxis-apikey.txt"

    # reduce the job duration
    do_must_gather: false
    check_workload_api: false
    preflight_test_certified_image: true
    preflight_run_health_check: false

    # test container recertify in parallel
    do_container_parallel_test: true
    max_images_per_batch: 2

    # Define container image tag
    certify_image_tag: "1-22"
    preflight_containers_to_certify:
      - container_image: "quay.io/avu0/demo1-nginx-ubi9:{{ certify_image_tag }}"
        pyxis_container_identifier: "65f982067e146e60a1fef87f"
      - container_image: "quay.io/avu0/demo2-nginx-ubi9:{{ certify_image_tag }}"
        pyxis_container_identifier: "65b1b1d1a3d7788c9d874521"
      - container_image: "quay.io/avu0/demo3-nginx-ubi9:{{ certify_image_tag }}"
        pyxis_container_identifier: "65f982a1f59e803922cbd3d2"
      - container_image: "quay.io/avu0/demo5-nginx-ubi9:{{ certify_image_tag }}"
        pyxis_container_identifier: "663d4dc2601da16bedc8885d"

  use_previous_topic: true
  inputs:
    kubeconfig: kubeconfig_path
...
