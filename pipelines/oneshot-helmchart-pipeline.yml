---
# This template chain with container stage, so it waits for oneshot-container to finish/succeed then it starts
# It will create helmchart project, update, attach PL, run chart-verifier and do PR merge to charts repository
- name: oneshot-helmchart
  stage: workload
  prev_stages: container
  topic: OCP-4.16
  ansible_playbook: /usr/share/dci-openshift-app-agent/dci-openshift-app-agent.yml
  ansible_cfg: ~/oneshot-certification-pipeline-template/pipelines/ansible.cfg
  # This use-case is not needed to use hooks then skip the post-run
  ansible_skip_tags:
    - post-run
  ansible_inventory: ~/oneshot-certification-pipeline-template/inventories/@QUEUE/@RESOURCE-workload.yml
  dci_credentials: ~/.config/dci-pipeline/dci_credentials.yml
  ansible_extravars:
    dci_cache_dir: ~/dci-cache-dir
    dci_config_dir: ~/oneshot-certification-pipeline-template/ocp-workload
    dci_gits_to_components:
      - ~/oneshot-certification-pipeline-template
    dci_local_log_dir: ~/upload-errors
    dci_tags: ["oneshot", "helmchart", "helmchart-pr", "step2"]
    dci_workarounds: []

    # backend access
    pyxis_apikey_path: "/var/lib/dci-openshift-app-agent/demo-pyxis-apikey.txt"

    organization_id: 12345678
    # page_size: 200

    # reduce the job duration
    do_must_gather: false
    check_workload_api: false

    # run helmchart tests and generate report.yaml
    do_chart_verifier: true
    # partner_name is Container Registry Namespace or vendor.label from API below
    # curl -X GET "https://catalog.redhat.com/api/containers/v1/vendors/org-id/12345678" --silent| jq -r '.label'
    partner_name: "user1"
    partner_email: "user1@email.com"
    github_token_path: "/var/lib/dci-openshift-app-agent/github-token.txt"

    # create helmchart cert project at connect
    helmchart_to_certify:
      - repository: "https://github.com/myuser/yingoneshotchart"
        short_description: "Add 50+ characters are mandatory for helmchart short description"
        chart_name: "yingoneshotchart"
        create_helmchart_project: true
        pyxis_product_lists:
          - "xxx"

    dci_charts:
      - name: yingoneshotchart
        chart_file: https://myuser.github.io/yingoneshotchart/yingoneshotchart-0.1.5.tgz
        # Remote, locally and with multi-values
        #values_file:
        #  - https://raw.githubusercontent.com/ansvu/samplechart/main/samplechart/values.yaml
        #  - /var/lib/dci-openshift-app-agent/samplechart/mycustom_values1.yaml
        #  - /var/lib/dci-openshift-app-agent/samplechart/mycustom_values2.yaml
        deploy_chart: true
        # -c=skipped cleanup e.g. teardown the CNF deployment and leave it running
        # -W=WebCatalogOnly - meaning only report.yaml will copy the charts/repo
        flags: "-c -W --helm-install-timeout 5m0s"
        # when create_pr is true, it will send PR to https://github.com/openshift-helm-charts/charts
        create_pr: true

    # update the cert project for helm chart
    cert_settings:
      # helmchart
      email_address: "email@email.com"
      application_categories: "Networking"
      github_usernames: "email" # a real github user that requires by charts workflow for approval
      long_description: "This is a long 100+ characters description about this sample chart"
      distribution_method: "undistributed"
      distribution_instructions: "Instruction how to get this helm-chart"

  use_previous_topic: true
  inputs:
    kubeconfig: kubeconfig_path
...
